{"version":3,"sources":["components/HeadOfTable/HeadOfTable.tsx","components/Navbar.tsx","api.ts","components/Loader/Loader.tsx","types/Sex.ts","components/PersonLink/PersonLink.tsx","components/PeopleTable.tsx","utils/SearchFiled.ts","utils/searchHelper.ts","components/SearchLink.tsx","utils/constants.ts","components/PeopleFilters.tsx","utils/getFilteredPeople.ts","utils/getPreparedPeople.ts","components/PeoplePage.tsx","Root.tsx","App.tsx","index.tsx"],"names":["HeadOfTable","handleNavLinkClass","isActive","classNames","className","role","to","Navbar","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","Loader","Sex","PersonLink","person","slug","sex","Female","Male","name","PeopleTable","people","personSlug","useParams","getParentsLink","personName","parent","find","href","map","born","died","motherName","fatherName","SearchField","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","CENTURY_LIST","PeopleFilters","useState","query","setQuery","setSearchParams","get","centuries","getAll","Centuries","generateCenturyLinkParams","isCenturyIncluded","century","currentCenturies","filter","centur","type","placeholder","onChange","event","target","includes","onClick","getFilteredPeople","sortField","order","filteredPeople","length","Math","ceil","getCentury","lowerQuery","toLocaleLowerCase","join","sort","person1","person2","localeCompare","reverse","getPreparedPeople","currentPeople","father","mother","PeoplePage","setPeople","isLoading","setIsLoading","hasError","setHasError","Query","Sort","Order","visiblePeople","isDisplayErrorMessage","isNoPeopleOnServer","isPeopleOnServer","useEffect","peopleFrom","preparedPeople","Root","index","element","path","replace","App","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.5bfe30ca.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport const HeadOfTable: React.FC = () => {\n  const handleNavLinkClass = ({ isActive }: { isActive: boolean }) => {\n    return classNames('navbar-item', {\n      'has-background-grey-lighter': isActive,\n    });\n  };\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={handleNavLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={handleNavLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import React from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { HeadOfTable } from './HeadOfTable/HeadOfTable';\n\nexport const Navbar: React.FC = () => {\n  return (\n    <>\n      <nav\n        data-cy=\"nav\"\n        className=\"navbar is-fixed-top has-shadow\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"container\">\n          <div className=\"navbar-brand\">\n            <HeadOfTable />\n          </div>\n        </div>\n      </nav>\n\n      <Outlet />\n    </>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export enum Sex{\n  Female = 'f',\n  Male = 'm',\n}\n","import { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\nimport { Sex } from '../../types/Sex';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  return (\n    <Link\n      to={`/people/${person.slug}`}\n      className={classNames({\n        'has-text-danger': person.sex === Sex.Female,\n        'has-text-link': person.sex === Sex.Male,\n      })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { Sex } from '../types/Sex';\nimport { PersonLink } from './PersonLink/PersonLink';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { personSlug } = useParams();\n\n  const getParentsLink = (personName: string | null) => {\n    if (!personName) {\n      return '-';\n    }\n\n    const parent = people.find(({ name }) => name === personName);\n\n    if (parent) {\n      return <PersonLink person={parent} />;\n    }\n\n    return personName;\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <a href=\"#/people?sort=name\">\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort\" />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <a href=\"#/people?sort=sex\">\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort\" />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <a href=\"#/people?sort=born&amp;order=desc\">\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort-up\" />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <a href=\"#/people?sort=died\">\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort\" />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      {people.map((person) => (\n        <tbody key={person.slug}>\n          <tr\n            data-cy=\"person\"\n            className={classNames({\n              'has-background-warning': person.slug === personSlug,\n            })}\n          >\n            <td>\n              <Link\n                to={person.slug}\n                className={classNames({\n                  'has-text-danger': person.sex === Sex.Female,\n                })}\n              >\n                {person.name}\n              </Link>\n            </td>\n\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td>{getParentsLink(person.motherName)}</td>\n            <td>{getParentsLink(person.fatherName)}</td>\n          </tr>\n        </tbody>\n      ))}\n    </table>\n  );\n};\n","export enum SearchField {\n  Centuries = 'centuries',\n  Query = 'query',\n  Sex = 'sex',\n  Sort = 'sort',\n  Order = 'order',\n}\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export const CENTURY_LIST = [\n  '16',\n  '17',\n  '18',\n  '19',\n  '20',\n];\n","import { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchField } from '../utils/SearchFiled';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { SearchLink } from './SearchLink';\nimport { Sex } from '../types/Sex';\nimport { CENTURY_LIST } from '../utils/constants';\n\nexport const PeopleFilters = () => {\n  const [query, setQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const sex = searchParams.get(SearchField.Sex);\n  const centuries = searchParams.getAll(SearchField.Centuries);\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchParams(\n      getSearchWith(searchParams, {\n        query: event.target.value || null,\n      }),\n    );\n    setQuery(event.target.value);\n  };\n\n  const generateCenturyLinkParams = (\n    isCenturyIncluded: boolean,\n    century: string,\n    currentCenturies: string[],\n  ) => {\n    return {\n      centuries: isCenturyIncluded\n        ? currentCenturies.filter(centur => centur !== century)\n        : [...currentCenturies, century],\n    };\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames(\n            { 'is-active': !sex },\n          )}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          className={classNames(\n            { 'is-active': sex === Sex.Male },\n          )}\n          params={{ sex: Sex.Male }}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          className={classNames(\n            { 'is-active': sex === Sex.Female },\n          )}\n          params={{ sex: Sex.Female }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURY_LIST.map((century: string) => {\n              const isCenturyIncluded = centuries.includes(century);\n\n              return (\n                <SearchLink\n                  key={century}\n                  data-cy=\"century\"\n                  className={classNames(\n                    'button',\n                    'mr-1',\n                    { 'is-info': isCenturyIncluded },\n                  )}\n                  params={generateCenturyLinkParams(\n                    isCenturyIncluded,\n                    century,\n                    centuries,\n                  )}\n                >\n                  {century}\n                </SearchLink>\n              );\n            })}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{ sex: null, query: null, centuries: null }}\n          onClick={() => {\n            setQuery('');\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import { Person } from '../types';\n\nexport const getFilteredPeople = (\n  people: Person[],\n  sex: string | null,\n  query: string | null,\n  centuries: string[],\n  sortField: string | null,\n  order: string | null,\n): Person[] => {\n  let filteredPeople = [...people];\n\n  if (sex) {\n    filteredPeople = filteredPeople.filter(person => person.sex === sex);\n  }\n\n  if (centuries.length) {\n    const getCentury = (person: Person) => Math.ceil(person.born / 100);\n\n    filteredPeople = filteredPeople.filter(person => centuries.includes(\n      getCentury(person).toString(),\n    ));\n  }\n\n  if (query) {\n    const lowerQuery = query.toLocaleLowerCase();\n\n    filteredPeople = filteredPeople.filter((person) => {\n      const searchableStrings = [\n        person.name,\n        person.motherName || '',\n        person.fatherName || '',\n      ];\n\n      const combinedString = searchableStrings.join(' ').toLocaleLowerCase();\n\n      return combinedString.includes(lowerQuery);\n    });\n  }\n\n  if (sortField) {\n    filteredPeople.sort((person1, person2) => {\n      switch (sortField) {\n        case 'name':\n        case 'sex':\n          return person1[sortField].localeCompare(person2[sortField]);\n\n        case 'born':\n        case 'died':\n          return person1[sortField] - person2[sortField];\n\n        default:\n          return 0;\n      }\n    });\n\n    if (order === 'desc') {\n      filteredPeople.reverse();\n    }\n  }\n\n  return filteredPeople;\n};\n","import { Person } from '../types';\n\nexport const getPreparedPeople = (currentPeople: Person[]) => {\n  return currentPeople.map(person => {\n    const father = currentPeople.find(({ name }) => name === person.fatherName);\n    const mother = currentPeople.find(({ name }) => name === person.motherName);\n\n    return {\n      ...person,\n      father,\n      mother,\n    };\n  });\n};\n","import React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Loader } from './Loader';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { PeopleTable } from './PeopleTable';\nimport { PeopleFilters } from './PeopleFilters';\nimport { SearchField } from '../utils/SearchFiled';\nimport { getFilteredPeople } from '../utils/getFilteredPeople';\nimport { getPreparedPeople } from '../utils/getPreparedPeople';\n\ntype Props = {\n  people: Person[],\n  setPeople: (newValue: Person[]) => void,\n};\n\nexport const PeoplePage: React.FC<Props> = ({ setPeople, people }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [searchParams] = useSearchParams();\n\n  const sex = searchParams.get(SearchField.Sex);\n  const query = searchParams.get(SearchField.Query);\n  const centuries = searchParams.getAll(SearchField.Centuries);\n  const sortField = searchParams.get(SearchField.Sort);\n  const order = searchParams.get(SearchField.Order);\n\n  const visiblePeople = getFilteredPeople(\n    people,\n    sex,\n    query,\n    centuries,\n    sortField,\n    order,\n  );\n\n  const isDisplayErrorMessage = hasError && !isLoading;\n  const isNoPeopleOnServer = !people.length && !isLoading && !hasError;\n  const isPeopleOnServer = !!people.length && !hasError;\n\n  useEffect(() => {\n    setHasError(false);\n    setIsLoading(true);\n\n    (async () => {\n      try {\n        const peopleFrom = await getPeople();\n        const preparedPeople = getPreparedPeople(peopleFrom);\n\n        setPeople(preparedPeople);\n      } catch {\n        setHasError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {!isLoading && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"block\">\n            <div className=\"box table-container\">\n              {isLoading && (<Loader />) }\n\n              {isDisplayErrorMessage && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {isNoPeopleOnServer && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {isPeopleOnServer && (\n                <PeopleTable people={visiblePeople} />\n              )}\n\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport { PeoplePage } from './components/PeoplePage';\nimport { Person } from './types';\n\ntype Props = {\n  people: Person[];\n  setPeople: (people: Person[]) => void;\n};\n\nexport const Root: React.FC<Props> = (\n  {\n    people,\n    setPeople,\n  },\n) => {\n  return (\n    <Routes>\n      <Route index element={<h1 className=\"title\">Home Page</h1>} />\n      <Route\n        path=\"*\"\n        element={<h1 className=\"title\">Page not found</h1>}\n      />\n      <Route\n        path=\"people\"\n        element={<PeoplePage people={people} setPeople={setPeople} />}\n      >\n        <Route\n          path=\":personSlug\"\n          element={<PeoplePage people={people} setPeople={setPeople} />}\n        />\n      </Route>\n      <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n    </Routes>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\nimport { getPeople } from './api';\nimport { Person } from './types';\nimport { Root } from './Root';\n\nexport const App = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n\n  useEffect(() => {\n    getPeople()\n      .then(setPeople);\n  }, []);\n\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Root people={people} setPeople={setPeople} />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}